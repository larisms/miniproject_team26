서버 환경 보안

문제인식 - 서버측 소스코드(app.py)에 노출되어있는 SECRET_KEY 값과 db환경 정보들을 어떻게 보안 관리 문제 인식.
과정- 클라이언트 측에서 전달받는 정보를 JWT 로 encode 하는 과정에서 필요한 SECRET_KEY 값이 그대로 노출되는 경우, 외부에서 소스코드를 보고 악용할 수 있는 만큼 보안에 취약하여 치명적일 수 있음. DB정보를 포함하여 추가적으로 외부에 공개되지 않아야 할 정보 역시 같은 보안 관리의 맥락에서 관리되어야 함.
해결 - 서버시스템 자체에서 환경변수를 사용해서 접근하는 방식과 config 파일을 만들어 관리환경을 분리 시키는 방식 중 후자를 선택. 또 별도 보안관리가 필요한 config파일의 경우, git에 공개되지 않도록 gitignore로 분류하여 관리. 


클라이언트 측 파일의 <head> 관리 

문제인식 - 페이지별 HTML 의 head에 필요한 라이브러리들을 CDN 방식으로 로드할때 발생하는 충돌 문제 인식
과정 - API 기능 요소들이 복잡하고 다양해지면서 필요한 라이브러리들 또한 많아지는 상황. 라이브러리 로드 과정에서 잦은 충돌과 특히, 팀프로젝트에서 페이지별 HTML 을 분업하여 배포 전 최종적으로 합치는 과정에서 문제가 도드라짐.
해결 - CDN 방식으로 라이브러리들을 로드할 경우 로드 순서에 따라 정리하는 것으로 해결. 서버와 클라이언트 간의 정보 전달 과정과 최종적으로 클라이언트 브라우저에 렌더링 완료되는 과정을 이해하고 그 과정의 순서대로 <head> 를 정렬.
      예를들어, 부트스트랩 CSS 가 JQuery 보다 위쪽에 정렬되어 위치할 경우 충돌 발생. 반드시 JQuery 의 로드가 선행 되어야 정상 구동.


EC2를 통한 배포 시 웹서버 환경 관리

문제인식 - 로컬환경에서 테스트를 병행하며 코드를 작성하고, 최종적으로 EC2에 파일을 업로드하여 배포하는 과정에서 발생되는 환경 설정 충돌 문제 인식
해결1 - 소스코드에서 임포트된 패키지나 라이브러리가 웹서버에도 동일하게 설치되어 있어야 하는 것이 당연하고, 에러코드를 통해서 어렵지 않게 해결할 수 있었음.
해결2 - 하지만 가장 좋은 해결 방법은, 로컬단계에서 소스코드를 작성하면서 부터 필요한 패키지나 라이브러리 목록을 체크하여 관리하고 같은 환경설정을 가급적 크로스체크하며 관리하는 것.



디테일 페이지 기능 구현

- 디테일 페이지에서 메인 페이지로 이동 : onclick으로 window.location.href(‘/’) 속성 실행

- 댓글달기 기능 구현 방법 : post_id, type, action 값을 db로 넘겨주고, 그 값을 get 으로 넘겨 받음

- 댓글 리스트 기능 구현 방법 : onclick으로 ‘포스팅하기’ 버튼 클릭 시 comment, today 값을 POST 요청한 후 요청이 success 한 경우 modal-post에 is-active를 지워주고, 윈도우를 새로고침함.

- 댓글 페이지 리로딩 : ‘포스팅하기’ 버튼 클릭 시 모달 창을 없애주고, 리로딩이 되어야 하기 때문에 모달 클래스를 없애주고 onclick으로 window.location.reload() 디테일 페이지를 리로딩해줌. 

- 좋아요 기능 구현 방법 : class를 가지고 있는 지 여부에 따라 action 값이 like, unlike로 나뉘어지고, 그 액션값이 unlike면 채워진 하트 클래스를 넣어주고, like면 빈 하트 클래스를 넣어줌.

